swagger: "2.0"
info:
  description: "This is a sample Tictactoe server."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "pizana.alfredo@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "tictactore.swagger.io"
basePath: "/v1"
tags:
- name: "authentication"
  description: "authentication endpoint"
- name: "users"
  description: "Everything about users"
- name: "games"
  description: "Access to the games of the user"
- name: "movements"
  description: "Endpoint of the movements"

schemes:
- "https"
- "http"
paths:
  /users:
    post:
      tags: 
      - "users"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "User"
        in: "body"
        description: "User object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "201":
          description: "User created"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Bad Request"
    get:
      tags:
      - "users"
      responses:
        "200":
          description: "Users found"
  /users/{id}:
    get:
      tags:
      - "users"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
      responses:
        "200":
          description: "User found"
    patch:
      tags:
      - "users"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
      - name: "User"
        in: "body"
        description: "User object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "User updated"
          schema:
            $ref: "#/definitions/User"
    delete:
      tags:
      - "users"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
      responses:
        "405":
          description: "Not Allowed"
  /games:
    post:
      tags:
      - "games"
      description: "Create a new game"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Game Created"
          schema:
            $ref: "#/definitions/Game"
        "400":
          description: "Bad Request"
      parameters:
      - name: "game"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/Game"
    patch:
      tags:
      - "games"
      description: "Update de game"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Game Updated"
          schema:
            $ref: "#/definitions/Game"
        "400":
          description: "Bad Request"
    
  /games/findByUserId/{userId}:
    get:
      tags:
      - "games"
      description: "Find games by userId"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Game Created"
          schema:
            $ref: "#/definitions/Game"
        "400":
          description: "Bad Request"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "integer"
  /games/{id}:
    get:
      tags:
      - "games"
      description: "get the game by id"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Game Found"
          schema:
            $ref: "#/definitions/Game"
        "400":
          description: "Bad Request"
    delete:
      tags:
      - "games"
      description: "Deativate the game"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Game Found"
          schema:
            $ref: "#/definitions/Game"
        "400":
          description: "Bad Request"
  /movements:
    post:
      tags:
      - "movements"
      description: "Add a new movement"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Game Created"
          schema:
            $ref: "#/definitions/Game"
        "400":
          description: "Bad Request"
    get:
      tags:
      - "movements"
      description: "get all movements"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "405":
          description: "Not Allowed"
  /movements/{id}:
    get:
      tags:
      - "movements"
      description: "get a movement by Id"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Movement Found"
          schema:
            $ref: "#/definitions/Movement"
        "405":
          description: "Not Allowed"
    delete:
      tags:
      - "movements"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
      responses:
        "405":
          description: "Not Allowed"
definitions:
  User:
    type: "object"
    required:
    - "email"
    properties:
      id:
        type: "integer"
      email: 
        type: "string"
        example: "example@company.com"
        description: "email of the user"
      password: 
        type: "string"
        description: "password of the user"
      username: 
        type: "string"
        description: "username"
      active:
        type: "boolean"
        default: true
      created:
        type: "string"
        format: "date-time"
      modified:
        type: "string"
        format: "date-time"
  Game:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      gameMode:
        type: "string"
        description: "Type of game selected"
        enum:
        - "random"
        - "ai"
        - "versus"
        default: "random"
      status: 
        type: "string"
        description: "current status of the game"
        enum:
        - "notstarted"
        - "inprogress"
        - "completed"
        default: "notstarted"
      winner:
        enum:
        - "user"
        - "opponent"
        - "notcompleted"
        - "tie"
        default: "notcompleted"
      nextMovement:
        enum:
          - "user"
          - "opponent"
      history:
        type: "array"
        items: 
          $ref: "#/definitions/Movement"
      createdBy:
        type: "integer"
        
      active:
        type: "boolean"
        default: true
      created:
        type: "string"
        format: "date-time"
      modified:
        type: "string"
        format: "date-time"
  Movement:
    type: "object"
    properties:
      id:
        type: "integer"
      gameId:
        type: "integer"
      playedBy:
        type: "string"
        description: "Current movement played by"
      position:
        type: "integer"
      created:
        type: "string"
        format: "date-time"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"      
        # Schema for error response body
  Error:
    type: "object"
    properties:
      code:
        type: "string"
      message:
        type: "string"
    required:
      - "code"
      - "message"
        