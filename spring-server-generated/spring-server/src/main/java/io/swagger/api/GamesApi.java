/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Game;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-05-13T04:30:20.933Z")

@Validated
@Api(value = "games", description = "the games API")
@RequestMapping(value = "/v1")
public interface GamesApi {

    @ApiOperation(value = "", nickname = "gamesFindByUserIdUserIdGet", notes = "Find games by userId", response = Game.class, tags={ "games", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Game Created", response = Game.class),
        @ApiResponse(code = 400, message = "Bad Request") })
    @RequestMapping(value = "/games/findByUserId/{userId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Game> gamesFindByUserIdUserIdGet(@ApiParam(value = "",required=true) @PathVariable("userId") Integer userId);


    @ApiOperation(value = "", nickname = "gamesIdDelete", notes = "Deativate the game", response = Game.class, tags={ "games", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Game Found", response = Game.class),
        @ApiResponse(code = 400, message = "Bad Request") })
    @RequestMapping(value = "/games/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Game> gamesIdDelete(@ApiParam(value = "",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "", nickname = "gamesIdGet", notes = "get the game by id", response = Game.class, tags={ "games", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Game Found", response = Game.class),
        @ApiResponse(code = 400, message = "Bad Request") })
    @RequestMapping(value = "/games/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Game> gamesIdGet(@ApiParam(value = "",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "", nickname = "gamesPatch", notes = "Update de game", response = Game.class, tags={ "games", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Game Updated", response = Game.class),
        @ApiResponse(code = 400, message = "Bad Request") })
    @RequestMapping(value = "/games",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Game> gamesPatch();


    @ApiOperation(value = "", nickname = "gamesPost", notes = "Create a new game", response = Game.class, tags={ "games", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Game Created", response = Game.class),
        @ApiResponse(code = 400, message = "Bad Request") })
    @RequestMapping(value = "/games",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Game> gamesPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Game game);

}
